plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.70'
    id 'kotlinx.benchmark' version '0.2.0-dev-8'
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.70"
    id "com.palantir.graal" version "0.6.0-113-g3804acf"
}

apply plugin: 'com.palantir.graal'
graal {
    mainClass 'org.openjdk.jmh.Main'
    outputName 'hello-world'
    option '-H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -H:ReflectionConfigurationFiles=./graal-native-image-conf/reflect-config.json -H:ResourceConfigurationFiles=./graal-native-image-conf/resource-config.json'
}

allOpen {
    annotation("org.openjdk.jmh.annotations.State")
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://dl.bintray.com/kotlin/kotlinx"
    }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}
group 'com.example'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    jvm()
    js {
        browser {
        }
        nodejs {
        }
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    mingwX64("mingw")
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx.benchmark.runtime:0.2.0-dev-8"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain{
            dependencies {
                implementation kotlin('stdlib')
                implementation "org.jetbrains.kotlinx:kotlinx.benchmark.runtime-jvm:0.2.0-dev-8"
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        mingwMain {
        }
        mingwTest {
        }
    }
}

benchmark {
    configurations {
        main {
            warmups = 2
            iterations = 3
        }
    }

    targets {
        register('mingw')
        register('jvm') {
            jmhVersion = "1.20"
        }
    }
}

nativeImage.setJarFile(file(".\\build\\benchmarks\\jvm\\jars\\untitled-jvm-jmh-0.0.1.jar"))
